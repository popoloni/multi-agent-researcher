{
  "metadata": {
    "repository_name": "astropy",
    "language": "python",
    "generated_at": "2025-06-28T11:40:32.663722",
    "total_files": 79,
    "total_elements": 985,
    "element_counts": {
      "function": 699,
      "class": 58,
      "method": 228
    }
  },
  "overview": "# astropy - Technical Documentation\n\n## Overview\nThis is a comprehensive technical documentation for the **astropy** repository, a python project containing 79 files and 985 code elements.\n\n## Repository Statistics\n- **Language**: python\n- **Total Files**: 79\n- **Lines of Code**: 33,792\n- **Functions**: 699\n- **Classes**: 58\n- **Variables**: 0\n\n## Architecture Overview\nThe repository is organized with the following code structure:\n- **Functions**: 699 elements\n- **Classs**: 58 elements\n- **Methods**: 228 elements\n\n## Installation & Setup\n```bash\ngit clone https://github.com/popoloni/astropy.git\ncd astropy\n# Follow language-specific installation instructions\npip install -r requirements.txt  # For Python projects\n```\n\n## Key Features\nThis repository provides various astronomical computation and analysis functionalities organized across 79 files. The codebase includes sophisticated algorithms for celestial mechanics, coordinate transformations, and astronomical data processing.\n",
  "api_reference": {
    "functions": [
      {
        "name": "get_moon_phase",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 70,
        "line_end": 105,
        "code_preview": "def get_moon_phase(date):\n    \"\"\"Calculate moon phase (0 = new moon, 1 = full moon)\"\"\"\n    if HIGH_PRECISION_AVAILABLE:\n        try:\n            # Use...",
        "complexity": null
      },
      {
        "name": "get_moon_illumination",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 107,
        "line_end": 113,
        "code_preview": "def get_moon_illumination(phase):\n    \"\"\"Calculate moon illumination percentage from phase\"\"\"\n    # 0 = new moon (0% illumination), 0.5 = full moon (1...",
        "complexity": null
      },
      {
        "name": "calculate_moon_position",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 115,
        "line_end": 141,
        "code_preview": "def calculate_moon_position(date, hour_offset=0):\n    \"\"\"Calculate moon position using high precision when available\"\"\"\n    if HIGH_PRECISION_AVAILABL...",
        "complexity": null
      },
      {
        "name": "is_moon_interference",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 143,
        "line_end": 184,
        "code_preview": "def is_moon_interference(obj_ra, obj_dec, moon_ra, moon_dec, moon_illumination, separation_threshold=60):\n    \"\"\"Check if moon causes interference for...",
        "complexity": null
      },
      {
        "name": "get_weeks_for_period",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 186,
        "line_end": 216,
        "code_preview": "def get_weeks_for_period(period_type, period_value, year=None):\n    \"\"\"Get week numbers for a specified time period\"\"\"\n    if year is None:\n        ye...",
        "complexity": null
      },
      {
        "name": "get_weekly_dates",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 218,
        "line_end": 238,
        "code_preview": "def get_weekly_dates(weeks_to_analyze, year=None):\n    \"\"\"Get dates for specified weeks\"\"\"\n    if year is None:\n        year = datetime.now().year  # ...",
        "complexity": null
      },
      {
        "name": "detect_mosaic_clusters",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 240,
        "line_end": 353,
        "code_preview": "def detect_mosaic_clusters(objects, config_fov=None, bortle_index=6):\n    \"\"\"Detect groups of objects and individual objects that require mosaics base...",
        "complexity": null
      },
      {
        "name": "calculate_ra_span",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 355,
        "line_end": 373,
        "code_preview": "def calculate_ra_span(ra_coords):\n    \"\"\"Calculate RA span handling wrap-around at 0/360 degrees\"\"\"\n    if not ra_coords:\n        return 0\n    \n    if...",
        "complexity": null
      },
      {
        "name": "get_fov_config",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 375,
        "line_end": 391,
        "code_preview": "def get_fov_config():\n    \"\"\"Get FOV configuration from config file\"\"\"\n    try:\n        import json\n        with open('config.json', 'r') as f:\n      ...",
        "complexity": null
      },
      {
        "name": "analyze_mosaic_statistics",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 393,
        "line_end": 417,
        "code_preview": "def analyze_mosaic_statistics(clusters):\n    \"\"\"Analyze mosaic clustering statistics for debugging\"\"\"\n    single_count = len([c for c in clusters if l...",
        "complexity": null
      },
      {
        "name": "check_object_visibility_in_config_window",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 419,
        "line_end": 435,
        "code_preview": "def check_object_visibility_in_config_window(obj, twilight_evening, twilight_morning):\n    \"\"\"Check if object is visible within the configured visibil...",
        "complexity": null
      },
      {
        "name": "safe_find_precise_twilight",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 437,
        "line_end": 457,
        "code_preview": "def safe_find_precise_twilight(date, observer_lat_rad, observer_lon_rad, twilight_type, event_type):\n    \"\"\"\n    Safe wrapper for find_precise_astrono...",
        "complexity": null
      },
      {
        "name": "analyze_weekly_conditions",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 459,
        "line_end": 637,
        "code_preview": "def analyze_weekly_conditions(objects, week_date):\n    \"\"\"Analyze conditions for a specific week\"\"\"\n    # Get Bortle index from config\n    try:\n      ...",
        "complexity": null
      },
      {
        "name": "score_week_for_astrophotography",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 639,
        "line_end": 663,
        "code_preview": "def score_week_for_astrophotography(week_data):\n    \"\"\"Score a week for astrophotography potential\"\"\"\n    score = 0\n    \n    # Base score from observa...",
        "complexity": null
      },
      {
        "name": "get_top_objects_for_week",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/trajectory_analysis.py",
        "line_start": 665,
        "line_end": 716,
        "code_preview": "def get_top_objects_for_week(week_data, top_n=5):\n    \"\"\"Get top recommended objects/groups for a week\"\"\"\n    recommendations = []\n    \n    # Score in...",
        "complexity": null
      }
    ],
    "classes": [
      {
        "name": "ReportGenerator",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/analysis/reporting.py",
        "line_start": 210,
        "line_end": 452,
        "code_preview": "class ReportGenerator:\n    \"\"\"Class to handle report generation and formatting\"\"\"\n    def __init__(self, date, location_data):\n        self.date = dat...",
        "complexity": null
      },
      {
        "name": "SchedulingStrategy",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_legacy.py",
        "line_start": 20,
        "line_end": 23,
        "code_preview": "class SchedulingStrategy(Enum):\n    LONGEST_DURATION = \"longest_duration\"  # Current strategy: prioritize longest visibility\n    MAX_OBJECTS = \"max_ob...",
        "complexity": null
      },
      {
        "name": "Observer",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_legacy.py",
        "line_start": 771,
        "line_end": 775,
        "code_preview": "class Observer:\n    \"\"\"Class to represent the observer's location\"\"\"\n    def __init__(self, lat, lon):\n        self.lat = math.radians(lat)\n        se...",
        "complexity": null
      },
      {
        "name": "CelestialObject",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_legacy.py",
        "line_start": 777,
        "line_end": 786,
        "code_preview": "class CelestialObject:\n    \"\"\"Class to represent a celestial object\"\"\"\n    def __init__(self, name, ra_hours, dec_deg, fov=None, magnitude=None):\n    ...",
        "complexity": null
      },
      {
        "name": "SchedulingStrategy",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_monolithic.py",
        "line_start": 44,
        "line_end": 50,
        "code_preview": "class SchedulingStrategy(Enum):\n    LONGEST_DURATION = \"longest_duration\"  # Current strategy: prioritize longest visibility\n    MAX_OBJECTS = \"max_ob...",
        "complexity": null
      },
      {
        "name": "Observer",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_monolithic.py",
        "line_start": 1148,
        "line_end": 1152,
        "code_preview": "class Observer:\n    \"\"\"Class to represent the observer's location\"\"\"\n    def __init__(self, lat, lon):\n        self.lat = math.radians(lat)\n        se...",
        "complexity": null
      },
      {
        "name": "CelestialObject",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_monolithic.py",
        "line_start": 1154,
        "line_end": 1163,
        "code_preview": "class CelestialObject:\n    \"\"\"Class to represent a celestial object\"\"\"\n    def __init__(self, name, ra_hours, dec_deg, fov=None, magnitude=None):\n    ...",
        "complexity": null
      },
      {
        "name": "MosaicGroup",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_monolithic.py",
        "line_start": 1165,
        "line_end": 1223,
        "code_preview": "class MosaicGroup:\n    \"\"\"Class to represent a mosaic group of celestial objects that behaves like a single CelestialObject\"\"\"\n    def __init__(self, ...",
        "complexity": null
      },
      {
        "name": "ReportGenerator",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_monolithic.py",
        "line_start": 1225,
        "line_end": 1492,
        "code_preview": "class ReportGenerator:\n    \"\"\"Class to handle report generation and formatting\"\"\"\n    def __init__(self, date, location_data):\n        self.date = dat...",
        "complexity": null
      },
      {
        "name": "AstronomicalCalculationError",
        "description": "No description available",
        "file": "/tmp/kenobi_repos/astropy/legacy/astropy_experimental.py",
        "line_start": 47,
        "line_end": 49,
        "code_preview": "class AstronomicalCalculationError(Exception):\n    \"\"\"Custom exception for astronomical calculation errors\"\"\"\n    pass",
        "complexity": null
      }
    ],
    "variables": []
  },
  "file_structure": [
    {
      "file": "trajectory_analysis.py",
      "elements": 28,
      "types": [
        "function"
      ]
    },
    {
      "file": "astropy.py",
      "elements": 25,
      "types": [
        "function"
      ]
    },
    {
      "file": "visualization/__init__.py",
      "elements": 0,
      "types": []
    },
    {
      "file": "visualization/plotting.py",
      "elements": 4,
      "types": [
        "function"
      ]
    },
    {
      "file": "utilities/analyze_mosaic_groups.py",
      "elements": 6,
      "types": [
        "function"
      ]
    },
    {
      "file": "utilities/export_api_key.py",
      "elements": 0,
      "types": []
    },
    {
      "file": "utilities/feature_demonstration_pythonista.py",
      "elements": 3,
      "types": [
        "function"
      ]
    },
    {
      "file": "utilities/convert_json.py",
      "elements": 8,
      "types": [
        "function"
      ]
    },
    {
      "file": "utilities/time_sim.py",
      "elements": 2,
      "types": [
        "function"
      ]
    },
    {
      "file": "utilities/feature_demonstration.py",
      "elements": 3,
      "types": [
        "function"
      ]
    },
    {
      "file": "analysis/object_selection.py",
      "elements": 3,
      "types": [
        "function"
      ]
    },
    {
      "file": "analysis/__init__.py",
      "elements": 0,
      "types": []
    },
    {
      "file": "analysis/reporting.py",
      "elements": 16,
      "types": [
        "method",
        "class",
        "function"
      ]
    },
    {
      "file": "analysis/mosaic_analysis.py",
      "elements": 3,
      "types": [
        "function"
      ]
    },
    {
      "file": "analysis/filtering.py",
      "elements": 2,
      "types": [
        "function"
      ]
    },
    {
      "file": "analysis/scheduling.py",
      "elements": 2,
      "types": [
        "function"
      ]
    },
    {
      "file": "wrappers/run_with_plots.py",
      "elements": 1,
      "types": [
        "function"
      ]
    },
    {
      "file": "wrappers/run_quarters_report.py",
      "elements": 1,
      "types": [
        "function"
      ]
    },
    {
      "file": "wrappers/run_max_objects.py",
      "elements": 1,
      "types": [
        "function"
      ]
    },
    {
      "file": "wrappers/run_quarters.py",
      "elements": 1,
      "types": [
        "function"
      ]
    }
  ]
}